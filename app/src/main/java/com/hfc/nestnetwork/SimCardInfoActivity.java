package com.hfc.nestnetwork;import android.Manifest;import android.app.Activity;import android.content.Context;import android.content.pm.PackageManager;import android.os.Bundle;import android.support.v4.app.ActivityCompat;import android.support.v4.content.ContextCompat;import android.telephony.CellInfo;import android.telephony.NeighboringCellInfo;import android.telephony.PhoneStateListener;import android.telephony.SignalStrength;import android.telephony.TelephonyManager;import android.telephony.gsm.GsmCellLocation;import android.widget.ListView;import android.widget.TextView;import java.lang.reflect.InvocationTargetException;import java.lang.reflect.Method;import java.util.List;public class SimCardInfoActivity extends Activity {    private static final String TAG = SimCardInfoActivity.class.toString();    private TextView mccTextView;    private TextView mncTextView;    private TextView lacTextView;    private TextView cellIdTextView;    private ListView mListView;    private static SimCardInfoActivity mInstance;    private NeighboringCellInfoAdapter adapter;    private TelephonyManager tm;    private TextView simStrength;    private static final int PERMISSION_REQUEST_CODE = 100;    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        //    Ȩ   Ƿ  ѱ             if (ContextCompat.checkSelfPermission(this, Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            //    Ȩ    δ   裬      Ȩ              ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_COARSE_LOCATION}, PERMISSION_REQUEST_CODE);        } else {            //    Ȩ   Ѿ      裬     ִ    Ӧ Ĳ               // TODO:       ִ       ߼         }        //    Ӧ   Ƿ    Ȩ          if (ContextCompat.checkSelfPermission(this, Manifest.permission.READ_PHONE_STATE)                != PackageManager.PERMISSION_GRANTED) {            //    û  Ȩ ޣ     Ȩ              ActivityCompat.requestPermissions(this,                    new String[]{Manifest.permission.READ_PHONE_STATE},                    100);        }        setContentView(R.layout.simcardinfo);        tm = (TelephonyManager) getSystemService(this.TELEPHONY_SERVICE);        List<CellInfo> allCellInfo = getAllCellInfo(this);        initview();        initRssi();        if (allCellInfo != null) {            adapter = new NeighboringCellInfoAdapter(this, allCellInfo);            mListView.setAdapter(adapter);        }        tm.listen(myPhoneStateListener, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);    }    public List<CellInfo> getAllCellInfo(Context context) {        try {            //   ȡ TelephonyManager               Class<?> telephonyManagerClass = TelephonyManager.class;            //   ȡ getAllCellInfo                 Method getAllCellInfoMethod = telephonyManagerClass.getDeclaredMethod("getAllCellInfo");            getAllCellInfoMethod.setAccessible(true);            //      getAllCellInfo                 return (List<CellInfo>) getAllCellInfoMethod.invoke(tm);        } catch (NoSuchMethodException | IllegalAccessException | InvocationTargetException e) {            e.printStackTrace();        }        return null;    }    private void initRssi() {        /// tm.listen(myPhoneStateListener, PhoneStateListener.LISTEN_SIGNAL_STRENGTHS);    }    private void initview() {        mccTextView = (TextView) findViewById(R.id.mccTextView);        mncTextView = (TextView) findViewById(R.id.mncTextView);        lacTextView = (TextView) findViewById(R.id.lacTextView);        simStrength = (TextView) findViewById(R.id.rssi);        cellIdTextView = (TextView) findViewById(R.id.cellIdTextView);        mListView = (ListView) findViewById(R.id.listView);        //  й  ƶ    й   ͨ  ȡLAC  CID ķ ʽ        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {            // TODO: Consider calling            //    ActivityCompat#requestPermissions            // here to request the missing permissions, and then overriding            //   public void onRequestPermissionsResult(int requestCode, String[] permissions,            //                                          int[] grantResults)            // to handle the case where the user grants the permission. See the documentation            // for ActivityCompat#requestPermissions for more details.            return;        }        //     ֵMCC + MNC        String operator = tm.getNetworkOperator();        int mcc = 0;        int mnc = 0;        if (operator != null && operator.length() >= 3) {            mcc = Integer.parseInt(operator.substring(0, 3));            mnc = Integer.parseInt(operator.substring(3));        }        //  й  ƶ    й   ͨ  ȡLAC  CID ķ ʽ        GsmCellLocation location = (GsmCellLocation) tm.getCellLocation();        int lac = 0;        int cellId = 0;        if (location != null) {            lac = location.getLac();            cellId = location.getCid();        }        mccTextView.setText("MCC: " + mcc);        mncTextView.setText("MNC: " + mnc);        lacTextView.setText("LAC: " + lac);        cellIdTextView.setText("Cell ID: " + cellId);    }    public void onSoftRightKeyDown() {        finish();    }    int currentPositon;    public void onUpKeyDown() {        currentPositon--;        if (currentPositon<adapter.getCount())            mListView.smoothScrollToPosition(currentPositon);    }    public void onDownKeyDown() {        currentPositon++;        if (currentPositon<adapter.getCount())            mListView.smoothScrollToPosition(currentPositon);    }    public void stopSignalStrengthMonitoring() {        if (tm != null) {            //   tm.listen(myPhoneStateListener, PhoneStateListener.LISTEN_NONE);        }    }    @Override    public void onDestroy() {        super.onDestroy();        stopSignalStrengthMonitoring();    }    /**     *   ȡSIM   ź ǿ       */    PhoneStateListener myPhoneStateListener = new PhoneStateListener() {        // @Override        public void onSignalStrengthsChanged(SignalStrength signalStrength) {            super.onSignalStrengthsChanged(signalStrength);            String signalInfo = signalStrength.toString();            String[] params = signalInfo.split(" ");            if (tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_LTE) {                // 4G       ѷ Χ >-90dBm Խ  Խ                  String itedbm = params[9];                if (simStrength != null ) {                    simStrength.setText(itedbm + " dBm ");                    // MyLog.d(TAG,simStrength.getText().toString());                }            } else if (tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSDPA                    || tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSPA                    || tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSUPA                    || tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS                    || tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSPAP) {                int asu = signalStrength.getGsmSignalStrength();                int cdmaDbm = signalStrength.getCdmaDbm();                //if (tm.getNetworkType() == TelephonyManager.NETWORK_TYPE_HSPA) {                if (simStrength != null ) {                    simStrength.setText(" asu"+asu);                }            } else {                // 2G      ѷ Χ>-90dBm Խ  Խ                  int asu = signalStrength.getGsmSignalStrength();                if (simStrength != null) {                    simStrength.setText((-113 + 2 * asu) + " dBm " + asu + "asu");                }            }        }    };}